{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/posts/markdown（md-editor-v3）样式丢失问题/","result":{"data":{"markdownRemark":{"fields":{"slug":"posts/markdown（md-editor-v3）样式丢失问题/"},"frontmatter":{"title":"markdown（md-editor-v3）如何在页面显示，以及样式丢失问题","description":"markdown（md-editor-v3）如何在页面显示，以及样式丢失问题的一个记录。","date":"2022 年 03 月 21 日","thumbnail":null},"html":"<p>之前在一个Vue3的项目中需要使用到markdown富文本框，于是乎就在网上查了一下支持Vue3的富文本框插件，最后感觉md-editor-v3很不错，而且还支持react，于是乎就选择它了，但是在使用他的时候出现了一些\"小插曲\"，最终凭我惊人的毅力💪，花费了3天😩，终于能友好的使用它了🤑。</p>\n<p>下面就将这些\"小插曲\"记录下来😎。</p>\n<p>首先介绍一下它怎么使用的：</p>\n<h3>功能</h3>\n<ol>\n<li>快捷插入内容工具栏、编辑器浏览器全屏、页面内全屏等；</li>\n<li>内置的白色主题和暗黑主题，支持绑定切换；</li>\n<li>支持快捷键插入内容；</li>\n<li>支持使用 prettier 格式化内容（使用 CDN 方式引入，只支持格式化 md 内容，可在代码内设置关闭）；</li>\n<li>支持多语言，支持自行扩展语言；</li>\n<li>支持复制粘贴上传图片，图片裁剪上传；</li>\n<li>支持仅预览模式（不显示编辑器，只显示 md 预览内容，无额外监听）</li>\n<li>...</li>\n</ol>\n<h3>预览例图</h3>\n<p><img src=\"/assets/img/md-editor-v3.png\" alt=\"md-editor-v3\"></p>\n<h3>Demo示例代码</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;template&gt;\n    &lt;el-row :gutter=&quot;20&quot; style=&quot;margin-bottom: 10px&quot;&gt;\n        &lt;el-col :span=&quot;6&quot;&gt;\n            &lt;el-input v-model=&quot;inputTitle&quot; placeholder=&quot;文章标题&quot; /&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;10&quot;&gt;\n            &lt;el-input v-model=&quot;inputIntroduce&quot; placeholder=&quot;文章简介&quot; /&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;6&quot;&gt;\n            &lt;el-input v-model=&quot;coverImg&quot; placeholder=&quot;封面图地址&quot;&gt;\n                &lt;template #prepend&gt;URL:&lt;/template&gt;\n            &lt;/el-input&gt;\n        &lt;/el-col&gt;\n        &lt;el-col :span=&quot;1&quot;&gt;\n            &lt;el-button type=&quot;primary&quot; :disabled=&quot;isNull&quot; @click=&quot;bindArticle&quot;&gt;&lt;i class=&quot;bi bi-send&quot;&gt;&lt;/i&gt;&amp;nbsp;发布&lt;/el-button&gt;\n        &lt;/el-col&gt;\n    &lt;/el-row&gt;\n    &lt;md-editor ref=&quot;editorRef&quot; v-model=&quot;valueText&quot; @onChange=&quot;updateMarkdown&quot; @onHtmlChanged=&quot;updateHtml&quot;\n        :toolbarsExclude=&quot;[&#39;github&#39;]&quot; @onUploadImg=&quot;onUploadImg&quot; @onSave=&quot;codeSave&quot; :footers=&quot;footers&quot;\n        placeholder=&quot;请在这里进行编辑！&quot;&gt;\n        &lt;template #defFooters&gt;\n            &lt;span&gt;左边Tips&lt;/span&gt;\n            &lt;span&gt;右边Tips&lt;/span&gt;\n        &lt;/template&gt;\n    &lt;/md-editor&gt;\n&lt;/template&gt;\n\n&lt;script lang=&quot;ts&quot; setup&gt;\nimport { ref, onMounted, computed } from &#39;vue&#39;\n// 自选代码高亮样式\nimport MdEditor from &#39;md-editor-v3&#39;\nimport &#39;md-editor-v3/lib/style.css&#39;\nimport sanitizeHtml from &#39;sanitize-html&#39;\nimport { ElMessage } from &#39;element-plus&#39;\nimport { RequestUploadImg, RequestArticleConetnt } from &#39;@/api&#39;\nimport type { ExposeParam } from &#39;md-editor-v3&#39;\nimport { useUserStore } from &#39;@/stores/user&#39;\nconst editorRef = ref&lt;ExposeParam&gt;()\nconst footers: any = [&#39;markdownTotal&#39;, 0, &#39;=&#39;, 1, &#39;scrollSwitch&#39;]\nconst sanitize = (html: any) =&gt; sanitizeHtml(html) //:sanitize=&quot;sanitize&quot;开发阶段 暂时关闭\n\nonMounted(() =&gt; {\n    editorRef.value?.focus()\n})\nconst inputTitle = ref(&#39;&#39;) //文章标题\nconst inputIntroduce = ref(&#39;&#39;) // 文章简介\nconst coverImg = ref(&#39;&#39;) // 封面图地址\n// 【接口】接受传参字段\ninterface IProps {\n    text: string\n}\n// 初始化默认参数\nconst props = withDefaults(defineProps&lt;IProps&gt;(), {\n    text: &#39;&#39;,\n})\nconst valueText: any = ref(props.text)\nlet mdStr = ref(&#39;&#39;)\nconst updateMarkdown = (md: string) =&gt; {\n    mdStr.value = md\n}\nlet htmlStr = ref(&#39;&#39;)\nconst updateHtml = (html: string) =&gt; {\n    htmlStr.value = html\n}\n// 图片上传事件\nconst imageFile: any = ref(&#39;&#39;) //上传图片文件\nconst imageUrl = ref(&#39;&#39;) //图片预览地址\n// submitForm为提交表单事件\nconst onUploadImg = async (\n    rawFile: Array&lt;File&gt;,\n    callback: (urls: Array&lt;string&gt;) =&gt; void\n) =&gt; {\n    const rawFiles = rawFile[0]\n    const arr = [&#39;image/jpeg&#39;, &#39;image/png&#39;, &#39;image/jpg&#39;]\n    console.log(&#39;图片格式--&gt;&#39;, rawFiles.type)\n    // 图片格式验证\n    if (!arr.includes(rawFiles.type)) {\n        ElMessage({\n            message: &#39;上传图片格式不正确！!&#39;,\n            type: &#39;error&#39;,\n        })\n        return false\n    }\n    // 图片大小验证\n    if (rawFiles.size / 1024 / 1024 &gt; 2) {\n        ElMessage({\n            message: &#39;上传图片大小不能超过2M!&#39;,\n            type: &#39;error&#39;,\n        })\n        return false\n    }\n    // 图片预览\n    //1. 选中的本地图片转成Base64编码 赋值给 imageUrl\n    //2. FileReader 读文件\n    imageUrl.value = URL.createObjectURL(rawFiles)\n    // 上传图片\n    imageFile.value = rawFiles\n    const formData = new FormData()\n    let fileBackInfo = await RequestUploadImg(imageFile.value) // 单文件上传\n    if (fileBackInfo.resultCode === 1) {\n        formData.append(&#39;url&#39;, fileBackInfo.resultInfo) // 传图片地址\n    } else if (fileBackInfo.resultCode === -1) {\n        ElMessage({\n            message: &#39;图片上传失败！&#39;,\n            type: &#39;error&#39;,\n        })\n        return false\n    }\n    callback([fileBackInfo.resultInfo])\n}\n// 保存代码\nconst codeSave = (v: string): void =&gt; {\n    ElMessage.success(&#39;已保存&#39;)\n    localStorage.setItem(&#39;MdCodeSave&#39;, v)\n    localStorage.setItem(&#39;MdHtml&#39;, htmlStr.value)\n}\nonMounted(() =&gt; {\n    // 挂载后获取之前保存的数据\n    if (localStorage.getItem(&#39;MdCodeSave&#39;)) {\n        valueText.value = localStorage.getItem(&#39;MdCodeSave&#39;)\n    }\n})\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n.md-editor {\n    height: 735px;\n}\n&lt;/style&gt;</code></pre></div>\n<h3>效果图</h3>\n<p><img src=\"/assets/img/md-editor-v3.png\" alt=\"md-editor-demo效果图\"></p>\n<h3>遇到的难题</h3>\n<ol>\n<li>\n<p>如何在页面上显示md转成的html内容呢？</p>\n<p>你需要拿到转换成html的数据，然后将他绑定到v-html中。</p>\n</li>\n<li>\n<p>样式丢失怎么办？</p>\n<p>就是在v-html元素上添加一个class=\"md-editor\"的类名就行，但是还需在js里面导入样式</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token string\">'md-editor-v3/lib/style.css'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">'@/assets/css/atom-one-dark.min.css'</span></code></pre></div>\n<p><img src=\"/assets/img/Snipaste_2020.01.01.png\" alt=\"代码\"></p>\n<p>然后，就完美解决样式丢失问题啦！</p>\n<p>好了，散会😎</p>\n</li>\n</ol>","timeToRead":4}},"pageContext":{"slug":"posts/markdown（md-editor-v3）样式丢失问题/","previousPost":{"fields":{"slug":"posts/阶段二面试题/"},"frontmatter":{"title":"阶段二面试题。"}},"nextPost":{"fields":{"slug":"posts/npm的常用命令/"},"frontmatter":{"title":"Npm的常用命令"}}}},"staticQueryHashes":["3344698684","3792814546"]}