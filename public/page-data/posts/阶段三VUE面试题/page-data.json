{"componentChunkName":"component---src-components-templates-blog-post-js","path":"/posts/阶段三VUE面试题/","result":{"data":{"markdownRemark":{"fields":{"slug":"posts/阶段三VUE面试题/"},"frontmatter":{"title":"第三阶段Vue面试题","description":"第三阶段Vue面试题.","date":"2021 年 03 月 25 日","thumbnail":"assets/img/Rectangle 4.png"},"html":"<h1>■ 符号说明</h1>\n<p>💘 课题   </p>\n<p>🌟 常见重要   </p>\n<p>🌛 需要有印象的</p>\n<p>🆕 v3新特性  </p>\n<h1>■ week1-day1 基本语法</h1>\n<h2>💘 课题</h2>\n<p>week1-day1  Vue基础（基本语法：简介、模板语法、列表渲染、条件渲染、事件处理）</p>\n<h2>🆕 先学vue3基本语法</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div id=\"root\">\n    &lt;h1>{{msg}}&lt;/h1>\n\n    &lt;input type=\"text\" v-model=\"content\" />\n    &lt;button @click=\"addFn\">添加&lt;/button>\n    \n    &lt;ul>\n        &lt;li v-for=\"item in todos\">{{item.id}} {{item.title}}&lt;/li>\n    &lt;/ul>\n&lt;/div>\n&lt;script src=\"https://unpkg.com/vue@next\">&lt;/script>\n&lt;script>\n// 以前：new Vue({el,data,methods....})\n// 以前：new Vue({data,methods....}).$mount('#root')\n// 现在：Vue.createApp({data,methods}).mount('#root')\n\nVue.createApp({\n    data() {\n        return {\n            msg: \"hello vue3\",\n\n            content: '',\n            todos: [\n                {id:1, title: '吃饭'},\n                {id:2, title: '睡觉'},\n                {id:3, title: '挤痘痘'},\n            ]\n        }   \n    },\n    methods: {\n        addFn() {\n            this.todos.push({\n                id: this.todos.length,\n                title: this.content\n            })\n        }\n    }\n}).mount('#root')\n&lt;/script></code></pre></div>\n<h2>🌟 说出vue常用的指令</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{{}} 两个大括号\nv-text\nv-html\nv-bind  简写 :\nv-for\nv-if、v-else-if、v-else\nv-show\nv-on   简写 @\n\nv-pre   跳过编译（几乎99%不会用）\nv-once  仅渲染一次（几乎99%不会用）\nv-cloak 插值闪烁问题  \n\nv-model 第二天知识点</code></pre></div>\n<h2>🌟  MVVM、MVC面试题</h2>\n<ul>\n<li>谈谈你对MVC的理解 </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MVC是软件开发中常见的开发模式，主要应用于后端，将程序划分为M模型、V视图、C控制器从而便于团队协作开发，减少代码冗余</code></pre></div>\n<ul>\n<li>谈谈你对MVVM理解</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MVVM是Model-View-ViewModel缩写，也就是将MVC中的Controller演变成ViewModel\nModel层代表数据模型、\nView层代表UI组件\nViewModel是Model、View层的桥梁，数据会绑定到ViewModel并自动将数据渲染到页面，视图变化会通知ViewModel层更新数据。\n\n或者 \n\n随着移动互联网的发展，MVVM思想借鉴MVC、MVP思想演变而来，M模型负责数据维护，V视图负责数据展示，VM则是M和V的桥梁，监控M模型数据变化自动更新V视图，从而解决传统前后端分离JQ架构弊端\n\n开发者在代码中大量调用相同的 DOM API, 处理繁琐 ，操作冗余，使得代码难以维护。\n大量的DOM 操作使页面渲染性能降低，加载速度变慢，影响用户体验。\n当 Model 频繁发生变化，开发者需要主动更新到View ；当用户的操作导致 Model 发生变化，开发者同样需要将变化的数据同步到Model 中，这样的工作不仅繁琐，而且很难维护复杂多变的数据状态。</code></pre></div>\n<ul>\n<li>谈谈MVVM和MVC区别</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">相同点：都是软件开发常见的开发模式或者开发思想\n不同点：\n1- MVC后端居多，MVVM前端\n2- MVC单向通信 目的将M和V代码分离，MVVM则是双向通信，不需要手动操作DOM\n\n或\n\n最初MVC最早出现在后端   M代表模型负责数据处理、V代表视图负责数据展示、C代表控制器负责调度\n后来前端也有了MVC库，最早实现的就是backbone.js 但是V和M并没有很好的解耦\n因此出现了MVVM模式，\nMVVM是Model-View-ViewModel缩写，也就是将MVC中的Controller演变成ViewModel\nModel层代表数据模型、\nView层代表UI组件\nViewModel是Model、View层的桥梁，数据会绑定到ViewModel并自动将数据渲染到页面，视图变化会通知ViewModel层更新数据。</code></pre></div>\n<blockquote>\n<p>多说一嘴：VUE不是纯MVVM框架 </p>\n<p><a href=\"https://cn.vuejs.org/v2/guide/instance.html#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-Vue-%E5%AE%9E%E4%BE%8B\">https://cn.vuejs.org/v2/guide/instance.html#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-Vue-%E5%AE%9E%E4%BE%8B</a> </p>\n<p>虽然没有完全遵循 <a href=\"https://zh.wikipedia.org/wiki/MVVM\">MVVM 模型</a>，但是 Vue 的设计也受到了它的启发。因此在文档中经常会使用 <code class=\"language-text\">vm</code> (ViewModel 的缩写) 这个变量名表示 Vue 实例。</p>\n</blockquote>\n<h2>🌟  说一下v-show、v-if的区别</h2>\n<p>相同点：都可以用户判断控制元素隐藏显示</p>\n<p>不同点：1-v-if语法更强、2-v-if控制DOM、v-show控制CSS</p>\n<p>如何选：高频切换例如二维码、登录弹框、提示框、删除提示框、tab选项卡，推荐使用v-show 来减少DOM频繁删除创建所产生的额外性能开销</p>\n<p>高逼格</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">v-if 是真正的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。\nv-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 “display” 属性进行切换。\n所以，v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；v-show 则适用于需要非常频繁切换条件的场景。</code></pre></div>\n<h2>🆕 判断循环v-if、v-for优先级</h2>\n<ul>\n<li>手册</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://cn.vuejs.org/v2/guide/list.html#v-for-%E4%B8%8E-v-if-%E4%B8%80%E5%90%8C%E4%BD%BF%E7%94%A8\nhttps://cn.vuejs.org/v2/guide/conditional.html#v-if-%E4%B8%8E-v-for-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8 </code></pre></div>\n<ul>\n<li>在 vue 2.x 中，在一个元素上同时使用 <code class=\"language-text\">v-if</code> 和 <code class=\"language-text\">v-for</code> 时， <code class=\"language-text\">v-for</code> 会优先作用。</li>\n<li>在 vue 3.x 中， <code class=\"language-text\">v-if</code> 总是优先于 <code class=\"language-text\">v-for</code> 生效。</li>\n<li>vue2 </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div id=\"root\">\n    &lt;h1>vue2 v-for>v-if（仅仅指同一个标签上）&lt;/h1>\n    \n\n    &lt;!-- 判断假的，压根不会遍历 -->\n    &lt;div v-if=\"state\">\n    \t&lt;p v-for=\"item in todos\">{{item.title}}&lt;/p>\n    &lt;/div>\n\n    &lt;!-- 同一个标签先v-for走三次生成3个p  然后挨个判断都隐藏删掉   脱裤子放屁的感觉 -->\n    &lt;p v-for=\"item in todos\" v-if=\"state\">{{item.title}}&lt;/p>\n    \n&lt;/div>\n&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">&lt;/script>\n&lt;script>\nconst vm = new Vue({\n    el: \"#root\",\n    data: {\n   \t \tstate: false,\n    \n        todos: [\n            {id:1, title:'a'},\n            {id:2, title:'b'},\n            {id:3, title:'c'},\n        ]\n    }\n})\n&lt;/script></code></pre></div>\n<ul>\n<li>vue3  优化</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div id=\"root2\">\n    &lt;h1>vue3 v-if > v-for&lt;/h1>\n    \n    \n    &lt;!-- 不循环 -->\n    &lt;p v-for=\"item in todos\" v-if=\"state\">{{item.title}}&lt;/p>\n\n    &lt;hr>\n    \n\n    &lt;!-- 不循环 -->\n    &lt;div v-if=\"state\">\n    \t&lt;p v-for=\"item in todos\">{{item.title}}&lt;/p>\n    &lt;/div>\n\n    &lt;hr>\n\n    &lt;!-- \n        多学一招：为了避免指令写在同一个标签上可读性查，因此代码提升/指令提升 也就是将v-if写在父级标签上\n        但是影响布局，\n        解决用template标签  不会\n    -->\n    &lt;template v-if=\"state\">\n    \t&lt;p v-for=\"item in todos\">{{item.title}}&lt;/p>\n    &lt;/template>\n&lt;/div>\n&lt;script src=\"https://unpkg.com/vue@next\">&lt;/script>\n&lt;script>\nVue.createApp({\n    data() {\n        return {\n            state: true,\n\n            todos: [\n                {id:1, title:'a', show: true},\n                {id:2, title:'b', show: false},\n                {id:3, title:'c', show: true},\n            ]\n        }\n    }\n}).mount('#root2')\n&lt;/script></code></pre></div>\n<h1>■ week1-day2  特殊语法</h1>\n<h2>💘 课题</h2>\n<p>week1-day2  Vue基础（特殊语法：表单输入绑定、购物车案例）</p>\n<p>无，都在【week1-day6  Vue原理】课件中</p>\n<h1>■ week1-day3 花式思想</h1>\n<h2>💘 课件</h2>\n<p>week1-day3  Vue基础（花式思想：Class与Style绑定、计算属性、侦听器、过滤器、自定义指令、ref属性、混入）</p>\n<h2>🌛 Class与Style绑定工作有用过吗</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">:class=\"item.icon\"\n:style=\"{ width: item.payload ? item.payload.width : '100%' }\"\n:style=\"{ width: item.width || '70px' }\"\n\n1-后台管理系统菜单   v-bidn:style=\"{width: 模型数据}\"\n2-主题色切换        \n3-tab选项卡\n4-其他\n\n案例1：https://vant-contrib.gitee.io/vant/#/zh-CN/tab\n源码1：https://unpkg.com/browse/vant@1.0.0/packages/tab/index.vue\n案例3：https://element.eleme.io/#/zh-CN/component/tabs \n源码3：https://unpkg.com/browse/element-ui@2.15.5/packages/tabs/src/tab-bar.vue\n案例3：https://element.eleme.io/#/zh-CN/component/button\n源码3：https://unpkg.com/browse/element-ui@2.15.5/packages/button/src/button.vue</code></pre></div>\n<h2>🌟 计算属性和侦听器区别、使用场景</h2>\n<p>计算属性：计算属性有缓存、并且是响应式依赖缓存，调用不加小括号</p>\n<p>侦听器：侦听器无缓存，侦听模型数据变化，不能调用</p>\n<p>计算属性：一个数据, 依赖另外一些数据 <strong>“计算”</strong> 而来的结果</p>\n<div class=\"gatsby-highlight\" data-language=\"t\"><pre class=\"language-t\"><code class=\"language-t\">利用vuex辅助函数，结合计算属性去显示数据 项目中大量使用\n树型分类数据\n等等复杂的逻辑，存在性能问题、或者避免重复调用存在性能问题的场景都可以使用计算属性。</code></pre></div>\n<p>侦听器：当需要监控模型数据变化时候</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">网站搜索\n监控弹框显示二维码\n模糊筛选、关键词筛选\n日期筛选、下拉筛选\n全选、全不选等\n锋团Admin项目中监控路由变化显示对应面包屑\n等等</code></pre></div>\n<blockquote>\n<ul>\n<li>相同点</li>\n<li>语法角度（ a 从思想上都是普通方法升级版  b 都可以写函数或对象</li>\n<li>研发角度：计算属性-减少冗余、缓存提升性能、侦听器-减少DOM操作 符合VUE响应式思想</li>\n<li>不同点</li>\n<li>从语法角度：调用时，计算属性调用不加小括号，侦听器不能调用</li>\n<li>从功能角度：计算属性有缓存、响应式依赖，侦听器没有缓存常用于搜索、监控数据变化、代替事件等</li>\n</ul>\n</blockquote>\n<h2>🌟 watch监控失效场景&#x26;解决方案</h2>\n<p>针对于对象类型的数据，需要加deep属性深度监听/侦听</p>\n<h2>🌟 watch两大属性应用场景</h2>\n<ul>\n<li>deep是什么哪里用</li>\n</ul>\n<blockquote>\n<p>a-锋团Admin项目中：监控路由变化，通过meta路由元信息重置面包屑🍞</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// watch: {\n//   // 针对于复杂类型的深度监听（注：深度监听场景）\n//   // params(newData) {\n//   //   console.log(newData);\n//   // },\n//   params: {\n//     deep: true,\n//     handler(newData) { // 也可以直接用日期组件的change事件\n//       console.log(newData);\n//  \t   this.params.start_time = newData.date[0];\n//   \t\t this.params.end_time = newData.date[1];\n//     },\n//   },\n// },</code></pre></div>\n<p>b-锋团Admin项目中：给角色分配权限 重置树🌲型控件</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">editAuth.vue \n// 获取所有权限  当前行数据变化获取最新的权限数据\nwatch: {\nrow: {\n deep: true,\n handler() {\n   getAuthsApi().then((res) => {\n   \tthis.authsData = res.data;\n   });\n },\n},\n},</code></pre></div>\n<p>C-锋团Admin项目中：基于elementui二次封装的form编辑默认显示数据要监控row变化</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">watch: { // qf-form封装的表单组件中，编辑传递的row当前行数据变化同步更改\n// row(newData) {\n//   console.log(\"watch\", newData);\n// },\nrow: {\n  handler(newData) {\n     if (!newData) return;\n     this.formData = newData;\n },\n immediate: true,\n},\n},</code></pre></div>\n</blockquote>\n<ul>\n<li>immediate是什么哪里用</li>\n</ul>\n<blockquote>\n<p>a-锋团Admin项目中：meat路由元信息【首次】重置面包屑🍞</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">watch: { // 监控路由变化同步面包屑\n// $route(newData) {\n//   // console.log(newData);\n//   this.name1 = newData.meta.name1;\n//   this.name2 = newData.meta.name2;\n// },\n$route: {\n handler(newData) {\n   this.name1 = newData.meta.name1;\n   this.name2 = newData.meta.name2;\n },\n\timmediate: true,\n},\n},</code></pre></div>\n<p>b-锋团Admin项目中：基于elementui二次封装的form编辑默认显示数据要监控row变化</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">watch: { // qf-form封装的表单组件中，编辑传递的row当前行数据变化同步更改\n// row(newData) {\n//   console.log(\"watch\", newData);\n// },\nrow: {\n  handler(newData) {\n     if (!newData) return;\n     this.formData = newData;\n },\n immediate: true,\n},\n},</code></pre></div>\n</blockquote>\n<h2>🌟 谈谈你对过滤器的理解有没有用过</h2>\n<p>作用：项目用来过滤数据，便于维护</p>\n<p>语法：Vue.filter()</p>\n<p>场景：订单状态、商品状态、性别、支付状态、发货状态。</p>\n<h2>🌟  谈谈你对混入的理解有没有用过</h2>\n<p>作用：复用组件里面的逻辑层，减少冗余便于维护</p>\n<p>语法：Vue.mixin({data,methods....})</p>\n<p>场景：锋团Admin项目中确认删除、接口操作后的提示重定向、jump重定向封装等等</p>\n<p>场景：跳转封装this.$router.push 也是为了避免重复点击报错；也可以通过重置路由模块原型</p>\n<h2>🌛 自定义指令有没有用过</h2>\n<p>用过</p>\n<p>全屏、复制剪切板、dialog对话框拖拽等等</p>\n<h1>■ week1-day4 组件编程</h1>\n<h2>💘 课件</h2>\n<p>week1-day4  Vue基础（组件编程：组件化开发思想、组件封装、props、$emit、组件通信、插槽slot、仿写UI组件库、动态组件等）</p>\n<h2>🌟 为啥data要写函数里面返回对象</h2>\n<blockquote>\n<p>说明1</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">一个组件被复用多次，也就会创建多个实例，本质上都是基于同一个构造函数，如果data直接是对象，因为对象是引用类型，所以会影响到所有实例。\n因此：为了保证组件不同的实例之间data不冲突，data必须是一个函数</code></pre></div>\n<p>或说法2</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">当一个组件被定义，data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！通过提供 data 函数，每次创建一个新实例后，我们能够调用 data 函数，从而返回初始数据的一个全新副本数据对象</code></pre></div>\n<p>或说法3</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">因为组件是用来复用的，且 JS 里对象是引用关系，\n如果组件中 data 是一个对象，那么这样作用域没有隔离，\n子组件中的 data 属性值会相互影响，如果组件中 data 选项是一个函数，\n那么每个实例可以维护一份被返回对象的独立的拷贝，\n组件实例之间的 data 属性值不会互相影响；而 new Vue 的实例，\n是不会被复用的，因此不存在引用对象的问题。\n\n\n\nfunction Component() {}\nComponent.prototype.data = {\nname: \"jack\",\nage: 22,\n};\nvar componentA = new Component();\nvar componentB = new Component();\ncomponentA.data.age = 55;\n// componentA 和 componentB data之间指向了同一个内存地址，\n// 相互污染\nconsole.log(componentA, componentB);\n\n\n\nfunction Component() {\nthis.data = this.data();\n}\nComponent.prototype.data = function () {\nreturn {\n name: \"jack\",\n age: 22,\n};\n};\nvar componentA = new Component();\nvar componentB = new Component();\ncomponentA.data.age = 55; // 互补影响\nconsole.log(componentA, componentB);\n\n\nps.\nlet a = {}\nlet b = {}   互补影响\n----------\nlet a = {}\nlet b = a    相互影响（一个对象赋值给另一个对象  才会相互影响</code></pre></div>\n</blockquote>\n<h2>🌛谈谈你对单向数据流的理解</h2>\n<p>单向数据流指在组件化思想，开发的项目中，数据由根或者父组件传递给子组件，禁止🈲子组件中直接更改，而是由父更改后重新传递给子数据使用</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 在vue中 只能父数据传递给子 父修改后会自动同步到子\n// 不允许子修改父  \n// 生活中：你妈给你多少钱 就用多少，不允许你直接去拿 否则长大了完犊子\n// 代码中：父给你就用，你自己直接改 容易后期搞懵逼谁串改了数据</code></pre></div>\n<h2>🌟 如何实现组件通信？</h2>\n<p>常用：状态管理工具 vuex<br>\n常用：父传子 props、子传父$emit、兄弟 eventBus\n常用：slot插槽\n概率：通过组件实例  ref获取、     =》   $parent获取、$root获取、$children获取\n概率：v-model\n了解：利用provide、inject</p>\n<h2>🌟 事件.native作用</h2>\n<p>概念：直接在组件上绑定原生事件</p>\n<p>举例：使用elemenui、vantui封装的弹框、input等组件，需要使用官方原生事件</p>\n<h2>🌟 在组件上写原生事件失效解决方案</h2>\n<blockquote>\n<p>方法1：通过自定义事件重写原生事件</p>\n<p>方法2：加.native修饰符</p>\n</blockquote>\n<h2>🌟 在组件上使用v-model原理</h2>\n<p>工作极少</p>\n<p>但是笔试可能需要手写</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;组件名 v-model=\"data中的键\">&lt;/组件名>\n&lt;组件名 :value=\"data中的键\" @input=\"data => data中的键 = data\">&lt;/组件名></code></pre></div>\n<h2>🌛 修饰符.sync原理</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;组件名 v-bind:属性名.sync=\"data中的键\">&lt;/组件名>\n&lt;组件名 v-bind:属性名=\"data中的键\"  @update:必须一样的属性名=\"data => data中的键 = data\">&lt;/组件名></code></pre></div>\n<h1>■ week1-day5 剩余知识：生命周期、keep-alive等等</h1>\n<h2>💘 课件</h2>\n<p>week1-day5  Vue基础（剩余知识：虚拟DOM、浏览器运行机制、回流重绘、生命周期、keep-alive、transition过渡</p>\n<h2>🌟 说出浏览器运行机制</h2>\n<p>浏览器主进程，负责创建和销毁tab进程、负责交互前进后退、负责网页文件下载等\n渲染进程：每个tab对应一个渲染进程，下面有GUI渲染线程、JS引擎线程、事件线程、定时器线程、异步请求线程\nGPU进程：负责3D图绘制\n第三方插件进程：负责第三方插件处理，例如跨域、广告拦截插件等</p>\n<h2>🌟 说出浏览器输入网址干了啥</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">浏览器输入网址回车\n去DNS服务器找网址对应的IP地址 \n根据IP地址加端口访问服务器软件 \n服务器返回数据\n浏览器通过renderer是渲染进程处理，\n其中GUI线程主要负责页面布局，解析HTML、CSS构建DOM树、CSS规则树、然后结合成渲染树、最终绘制显示</code></pre></div>\n<h2>🌛 说出JS为什么是单线程</h2>\n<blockquote>\n<h3>先看一个比喻</h3>\n<p>进程就是一个公司，每个公司都有自己的资源可以调度；公司之间是相互独立的；而线程就是公司中的每个员工(你，我，他)，多个员工一起合作，完成任务，公司可以有一名员工或多个，员工之间共享公司的空间</p>\n<h3>什么是进程？</h3>\n<p>进程：是cpu分配资源的最小单位；（是能拥有资源和独立运行的最小单位）</p>\n<h3>什么是线程？</h3>\n<p>线程：是cpu调度的最小单位；（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）</p>\n<h4>浏览器是多进程的</h4>\n<p>放在浏览器中，每打开一个tab页面，其实就是新开了一个进程，在这个进程中，还有ui渲染线程，js引擎线程，http请求线程等。 所以，浏览器是一个多进程的。</p>\n<h3>大家都在说js是单线程的，但是为什么要设计成单线程？</h3>\n<p>这主要和js的用途有关，js是作为浏览器的脚本语言，主要是实现用户与浏览器的交互，以及操作dom；这决定了它只能是单线程，否则会带来很复杂的同步问题。 举个例子：如果js被设计了多线程，如果有一个线程要修改一个dom元素，另一个线程要删除这个dom元素，此时浏览器就会一脸茫然，不知所措。所以，为了避免复杂性，从一诞生，JavaScript就是单线程，这已经成了这门语言的核心特征，将来也不会改变.</p>\n<h4>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</h4>\n</blockquote>\n<h2>🌛 说出JS是单线程 为什么不存在执行效率问题</h2>\n<p>JS是单线程执行程序代码，形成一个执行栈，挨个处理；</p>\n<p>但是遇到特别耗费时间的代码 ，例如异步请求，事件等，</p>\n<p>不会堵塞等待执行，而是交给浏览器其他线程处理后，再丢到执行栈中处理，从而保证还行效率</p>\n<h2>🌟 谈谈你对回流重绘的理解</h2>\n<p>回流/重排：页面布局流发生改变就叫做回流，例如：width、height、border、top等\n重绘：重绘元素自身的样式发生改变但是不会影响布局流，例如：color、background、box-shadow等</p>\n<h2>🌟 哪些属性导致回流、哪些属性导致重绘</h2>\n<p>例如：width、height、border、top等\n例如：color、background、box-shadow等</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1、添加或删除可见的DOM元素\n2、元素的位置发生变化\n3、元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）\n4、内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。\n5、页面一开始渲染的时候（这肯定避免不了）\n6、浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）\n\n而重绘是指在布局不变得情况下，比如background-color,或者改动一下字体颜色的color等。</code></pre></div>\n<h2>🌟 如何避免或减少回流重绘</h2>\n<blockquote>\n<p><strong>JavaScript优化法</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">（1）避免频繁操作样式，最好一次性重写style属性，或者将样式列表定义为class并一次性更改class属性。\n（2）避免频繁操作DOM，创建一个documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中，也就是虚拟DOM\n（3）避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。</code></pre></div>\n<p><strong>CSS优化法</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">（1）使用 transform 替代 top\n（2）使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流（改变了布局\n（3）避免使用table布局，可能很小的一个小改动会造成整个 table 的重新布局。\n（4）尽可能在DOM树的最末端改变class，回流是不可避免的，但可以减少其影响。尽可能在DOM树的最末端改变class，可以限制了回流的范围，使其影响尽可能少的节点。\n（5）避免设置多层内联样式，CSS 选择符从右往左匹配查找，避免节点层级过多。\n（6）将动画效果应用到position属性为absolute或fixed的元素上，避免影响其他元素的布局，这样只是一个重绘，而不是回流，同时，控制动画速度可以选择 requestAnimationFrame，详见探讨 requestAnimationFrame。\n（7）避免使用CSS表达式，可能会引发回流。\n（8）将频繁重绘或者回流的节点设置为图层，图层能够阻止该节点的渲染行为影响别的节点，例如will-change、video、iframe等标签，浏览器会自动将该节点变为图层。\n（9）CSS3 硬件加速（GPU加速），使用css3硬件加速，可以让transform、opacity、filters这些动画不会引起回流重绘 。但是对于动画的其它属性，比如background-color这些，还是会引起回流重绘的，不过它还是可以提升这些动画的性能。</code></pre></div>\n</blockquote>\n<h2>🌟 谈谈你对虚拟DOM的理解</h2>\n<p>通过js对象来描述真实的DOM，从而减少回流重绘</p>\n<blockquote>\n<p>减少了同一时间内的页面多处内容修改所触发的浏览器reflow和repaint的次数，可能把多个不同的DOM操作集中减少到了几次甚至一次，优化了触发浏览器reflow和repaint的次数。。</p>\n</blockquote>\n<h2>🌟 说出VUE有哪些生命周期并说出应用场景</h2>\n<p>before开头的实际不用</p>\n<p>非before开头</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">created   异步请求\nmounted   异步请求、DOM操作（swiper、echarts、聊天默认滚到底部）\nupdated   监控数据变化进一步DOM操作，例如聊天窗口到底部、订单可视化图表重置等等\ndestroyed 清理非vue资源防止内存泄露，例如登陆倒计时定时器</code></pre></div>\n<p>剩余</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">activated\t   组件被keep-alive缓存后，执行场景场景数据，例如添加后列表更新最新数据\ndeactivated  组件被keep-alive缓存后代替destroyed工作\nerrorCaptured 当页面发生错误是优雅降级，显示友好提示页面，react框架提示就是参考这一做法</code></pre></div>\n<blockquote>\n<p>tips</p>\n<p>优雅降级(<code class=\"language-text\">graceful degradation</code>)：一开始就构建站点的完整功能，然后针对浏览器测试和修复。 </p>\n<p>ive enhancement`)：一开始只构建站点的最少特性，然后不断针对各浏览器追加功能。</p>\n</blockquote>\n<p>渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进，达到更好的用户体验。 </p>\n<p>优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>\n<p>2109班面试追问</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">问1：created、和mounted区别\n答1：created不可以dom操作 \n问2：真的不可以吗\n答2：可以通过 this.$nextTick()\n问3：父子组件嵌套、生命周期执行顺序 created、mounted\n答2：大方向  父created、子created、子mounted、父mounted</code></pre></div>\n<h2>🌟 created里面可以操作DOM吗</h2>\n<p>通过ref不行，原生JS可以，因为该钩子函数触发还没有编译（不推荐</p>\n<p>非要通过ref操作，可以写this.$nextTick来实现</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div id=\"root\">\n  &lt;button ref=\"btn\">a&lt;/button>\n&lt;/div>\n&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">&lt;/script>\n&lt;script>\n  const vm = new Vue({\n    el: \"#root\",\n    data: {},\n    created() {\n      let btnObj = document.querySelector(\"button\");\n      console.log(\"js可以\", btnObj);\n      console.log(\"ref不行🚫\", this.$refs.btn);\n\n      this.$nextTick(() => {\n        console.log(\"ref可以\", this.$refs.btn);\n      });\n    },\n  });\n&lt;/script></code></pre></div>\n<blockquote>\n<p>追问1：created 定时器打印1   this.$nextTick 打印2   定时器打印3</p>\n<p>回答1:  2、1、3</p>\n<p>追问2：created Promise.then打印1   this.$nextTick 打印2   定时器打印3</p>\n<p>回答2：1、 2、 3</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 追问1：created 定时器打印1   this.$nextTick 打印2   定时器打印3\n// 回答1:  2、1、3\n// setTimeout(() => console.log(1), 1000) \n// // Promise.resolve().then(() => console.log(2))\n// this.$nextTick(() => console.log(2))\n// setTimeout(() => console.log(3), 1000) \n\n// 追问2：created Promise.then打印1   this.$nextTick 打印2   定时器打印3\n// 回答2：1、 2、 3\n// Promise.resolve().then(() => console.log(1)) \n// this.$nextTick(() => console.log(2))\n// setTimeout(() => console.log(3), 1000) </code></pre></div>\n<h2>🌛 watch与created() 哪个先执行？</h2>\n<p>watch 中的 immediate 会让监听在初始值声明的时候去执行监听计算，否则就是 created 先执行</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div id=\"root\">\n  &lt;h1>{{msg}}&lt;/h1>\n&lt;/div>\n&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">&lt;/script>\n&lt;script>\n  const vm = new Vue({\n    el: \"#root\",\n    data: {\n      msg: \"hello\",\n    },\n    created() {\n      console.log(\"后created\");\n    },\n    watch: {\n      msg: {\n        handler() {\n          console.log(\"先watch\");\n        },\n        immediate: true,\n      },\n    },\n  });\n&lt;/script></code></pre></div>\n<h2>🌛数据可视化 echarts</h2>\n<p>在项目中的使用细节，数据的使用，修改，销毁？</p>\n<p>细节1：首次实例化渲染，mounted中注意dom是否挂载，特别是操作子组件</p>\n<p>细节2：重置echarts数据，如果页面没有遍历显示数据明细，无法在updated钩子函数监控</p>\n<blockquote>\n<p>解决：watch或者更新后直接调用methods方法</p>\n</blockquote>\n<p>细节3：重置echarts数据，得重新实例化才能显示最新数据</p>\n<p>细节4：离开组件手动关闭连接  ws.close()  （注：如果定时器写的要清除定时器</p>\n<h2>🌟 谈谈你对keep-alive的理解，并说出应用场景</h2>\n<p>vue中内置组件，主要将组件相关数据缓存到内存中，避免重复挂载卸载产生的性能开销</p>\n<p>场景：后台管理系统数据、移动端长列表、tab选项卡等</p>\n<p>周边问题</p>\n<blockquote>\n<p>1-缓存组件使用哪个属性？</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">:include、:exclude、:max</code></pre></div>\n<p>2-此时多的哪两个钩子函数？ </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">activated 、deactivated</code></pre></div>\n<p>3-页面加载刷新的时候，被缓存的组件，会执行其中的方法吗？   </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">刷新就相当于首次打开  所以created、activated又重新出发</code></pre></div>\n</blockquote>\n<h2>🌟 谈谈你对$nextTick的理解，并说出应用场景</h2>\n<p>理解：vue中用来确保，在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p>\n<p>场景：对话框放登录二维码，放表单选项获取数据、获取焦点，点击事件修改对话框状态后开始加载DOM，为确保能获取并操作DOM使用$nextTick包起来。</p>\n<p>语法:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 修改数据\nvm.msg = 'Hello'\n// DOM 还没有更新\nVue.nextTick(function () {\n  // DOM 更新了\n})\n\n// 作为一个 Promise 使用 (2.1.0 起新增，详见接下来的提示)\nVue.nextTick()\n  .then(function () {\n    // DOM 更新了\n  })</code></pre></div>\n<blockquote>\n<p>vue确保模型数据更新完毕之后执行$nextTick里面的callback代码</p>\n</blockquote>\n<h2>🌟 说出$nextTick原理</h2>\n<blockquote>\n<p>Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 Promise.then、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 setTimeout(fn, 0) 代替。</p>\n</blockquote>\n<p>Vue底层监控的数据更新会开启一个队列进行优化处理，然后在下一个的事件循环中去触发nextTick的callback执行，也就是会把nextTick的callback依次尝试放到用原生的 Promise.then、MutationObserver 和 setImmediate、setTimeout中，底层核心代码大致思路如下</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 把回调函数放入callbacks等待执行\n2. 将执行函数放到微任务或者宏任务中\n3. 事件循环到了微任务或者宏任务，执行函数依次执行callbacks中的回调</code></pre></div>\n<p><a href=\"https://github.com/vuejs/vue/blob/dev/src/core/global-api/index.js#L46\">https://github.com/vuejs/vue/blob/dev/src/core/global-api/index.js#L46</a></p>\n<p><a href=\"https://github.com/vuejs/vue/blob/dev/src/core/util/next-tick.js#L87\">https://github.com/vuejs/vue/blob/dev/src/core/util/next-tick.js#L87</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  callbacks.push(() => { // 将拿到的回调函数存放到数组中\n    if (cb) {\n      try { // 错误捕获\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) { // 如果当前没有在pending的时候，就会执行timeFunc\n    pending = true\n    timerFunc() // 多次执行nextTick只会执行一次，timerFunc就是一个异步方法\n  }\n  if (!cb &amp;&amp; typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve\n    })\n  }\n}\n//</code></pre></div>\n<p><a href=\"https://github.com/vuejs/vue/blob/dev/src/core/util/next-tick.js#L33\">https://github.com/vuejs/vue/blob/dev/src/core/util/next-tick.js#L33</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const callbacks = []\nlet pending = false\n\nfunction flushCallbacks () {\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i &lt; copies.length; i++) {\n    copies[i]()\n  }\n}\n\n\nlet timerFunc\n\n//判断1：是否原生支持Promise\nif (typeof Promise !== 'undefined' &amp;&amp; isNative(Promise)) {\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    if (isIOS) setTimeout(noop)\n  }\n  isUsingMicroTask = true\n} else if (!isIE &amp;&amp; typeof MutationObserver !== 'undefined' &amp;&amp; (\n\t//判断2：是否原生支持MutationObserver\n  isNative(MutationObserver) ||\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n  isUsingMicroTask = true\n} else if (typeof setImmediate !== 'undefined' &amp;&amp; isNative(setImmediate)) {\n  //判断3：是否原生支持setImmediate\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else {\n  //判断4：上面都不行，直接用setTimeout\n  timerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}</code></pre></div>\n<h1>■ week1-day6  Vue原理</h1>\n<h2>💘 课题</h2>\n<p>week1-day6  Vue原理（语法原理：v-model语法原理、响应式原理、Vue源码分析、自定义Vue库）</p>\n<h2>🌟 说一下v-model原理</h2>\n<p>v-model其实是个语法糖底层是基于【:value】和【@input】 封装</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;input type=\"text\" :value=\"msg\" @input=\"msg = $event.target.value\"></code></pre></div>\n<h2>🌟 VUE2响应式原理（中级）</h2>\n<p>Vue2在初始化数据时，会使用Object.defineProperty语法对data中的所有属性进行数据劫持，如果属性发生变化就会通知进行更新操作</p>\n<h2>🌟 VUE2响应式原理（高级）</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">底层通过Object.defineProperty进行数据劫持，然后通过发布订阅通知视图更新。\n\n或者\n\nvue在初始化数据时，会使用Object.defineProperty重新定义data中所有属性，当页面使用对应属性时，首先会进行依赖收集（watcher，如果属性发生变化就会通知相关依赖进行更新操作（发布订阅。\n并且底层针对于对象、数组做了特殊处理，对象类型多次递归，数组类型重写数组方法</code></pre></div>\n<h2>🌟 VUE2响应式数据无法劫持原因、和解决方案</h2>\n<p>原因：是因为原生Object.defineProperty针对复杂数据修改无法劫持，因此无法通知视图更新</p>\n<p>解决：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">自己解决：递归全搞定\nVUE解决：\n1-对象递归\n2-数组重写（因为深度监听需要递归到底，而数组相对数据很多，一次性计算量大  所以改用重写方式）\n3-增加额外api \nthis.$forceUpdate()   \nthis.$set(this.data数据, 要劫持得数组索引或对象键, 默认值)</code></pre></div>\n<h2>🌟 $forceUpdate 原理</h2>\n<p>这个之前有大概看过源码 </p>\n<p>就是notify强制视图所有数据更新 </p>\n<h2>🌟 $set 原理</h2>\n<p>1、他是vue原型上的一个方法</p>\n<blockquote>\n<p><a href=\"https://github.com/vuejs/vue/blob/dev/src/core/instance/state.js#L345\">https://github.com/vuejs/vue/blob/dev/src/core/instance/state.js#L345</a></p>\n<p><a href=\"https://github.com/vuejs/vue/blob/dev/src/core/instance/state.js#L14\">https://github.com/vuejs/vue/blob/dev/src/core/instance/state.js#L14</a></p>\n</blockquote>\n<p>2、这个之前有大概看过源码</p>\n<p>主要两大核心</p>\n<p>1、通过defineReactive进行数据劫持</p>\n<p>2、通过notify进行视图更新</p>\n<blockquote>\n<p><a href=\"https://github.com/vuejs/vue/blob/dev/src/core/observer/index.js#L201\">https://github.com/vuejs/vue/blob/dev/src/core/observer/index.js#L201</a></p>\n</blockquote>\n<h2>🌛 $delete 原理</h2>\n<p>删除对象的属性。如果对象是响应式的，确保删除能触发更新视图。这个方法主要用于避开 <code class=\"language-text\">Vue</code> 不能检测到属性被删除的限制，但是你应该很少会使用它。</p>\n<p>语法：this/Vue.$delete(target，propertyName/index)</p>\n<p>1、他是vue原型上的一个方法</p>\n<blockquote>\n<p><a href=\"https://github.com/vuejs/vue/blob/dev/src/core/instance/state.js#L346\">https://github.com/vuejs/vue/blob/dev/src/core/instance/state.js#L346</a> </p>\n<p><a href=\"https://github.com/vuejs/vue/blob/dev/src/core/instance/state.js#L14\">https://github.com/vuejs/vue/blob/dev/src/core/instance/state.js#L14</a></p>\n</blockquote>\n<p>2、这个之前有大概看过源码</p>\n<p>主要两大核心</p>\n<p>1、通过delete 删除对象的属性</p>\n<p>2、通过notify进行视图更新</p>\n<blockquote>\n<p><a href=\"https://github.com/vuejs/vue/blob/dev/src/core/observer/index.js#L236\">https://github.com/vuejs/vue/blob/dev/src/core/observer/index.js#L236</a></p>\n</blockquote>\n<h2>🌟 Vue.set/delete 原理</h2>\n<p><a href=\"https://github.com/vuejs/vue/blob/0603ff695d2f41286239298210113cbe2b209e28/src/core/global-api/index.js#L44\">https://github.com/vuejs/vue/blob/0603ff695d2f41286239298210113cbe2b209e28/src/core/global-api/index.js#L44</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { set } from '../observer/index'\n\n...\nVue.set = set\n...</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { set } from '../observer/index'\n\n...\nVue.prototype.$set = set\n...</code></pre></div>\n<p>都是从 ../observer/index 文件中导出的</p>\n<p>区别在于Vue.set()是将set函数绑定在Vue构造函数上，this.$set()是将set函数绑定在Vue原型上。</p>\n<h2>🆕 响应式原理</h2>\n<p>为啥VUE3要选择proxy和reflect</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- Object.defineProperty 拦截的是对象的属性，会改变原对象。 proxy 是拦截整个对象，通过 new 生成一个新对象，不会改变原对象。\n- proxy 语法更强，拦截方式除了上面的 get 和 set ，还有 11 种，以前就6个\n- proxy 特性更强，可以监听未定义的，针对于N层则get时判断递归添加proxy拦截即可</code></pre></div>\n<p>不用reflect可以吗</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 简单场景可以，复杂场景不行\n- 举例：https://blog.csdn.net/qq_34629352/article/details/114210386  存在BUG\n- 其次：用了更方便推荐结合用 例如 has、deleteProperty、defineProperty友好提示等</code></pre></div>\n<h1>■ week2-day1  路由相关</h1>\n<h2>💘 课件</h2>\n<p>week2-day1  Vue进阶（项目准备：路由、重定向、路由模式、路由原理、路由参数、路由传参、嵌套路由、命名视图、导航守卫、路由addRoute）</p>\n<h2>🌛 路由-对象里面的键</h2>\n<p>{  </p>\n<p>​\tpath,</p>\n<p>​\tcomponent,</p>\n<p>​\tname,</p>\n<p>​\tredirect,</p>\n<p>​\talias </p>\n<p>​\tchildren,</p>\n<p>​\tcomponents</p>\n<p>​\tmeta</p>\n<p>   ....</p>\n<p>}</p>\n<h2>🌟 路由-你说下vue路由模式有几种？</h2>\n<p><a href=\"https://router.vuejs.org/zh/api/#mode\">https://router.vuejs.org/zh/api/#mode</a> </p>\n<p>常用路由模式有2个，分别为hash和history  直接修改路 由构造函数加个mode键即可</p>\n<p>准确说有3个，hash/history用于客户端，abstract用户服务端</p>\n<h2>🌟 路由-你说下vue路由原理？</h2>\n<p>首先vue路由是基于SPA单页面应用思想去开发的</p>\n<p>利用BOM API 来使用</p>\n<p>hash模式        通过 BOM  location对象的hash属性来改变路由   window.onhashchange</p>\n<p>history模式     通过BOM history对象的pushState方法来改变路由    window.onpopstate</p>\n<h2>🌟 路由-history有什么问题，如何解决？</h2>\n<p>刷新无法加载网页问题</p>\n<p>可以通过服务器配置来解决</p>\n<h2>🌟 路由-什么是单页面应用SPA优缺点，如何选择</h2>\n<p>SPA优点：减少HTTP请求、加载响应数据、提高用户体验度，方便增加动画\nSPA缺点：首屏加载过慢、不利于SEO优化（就是百度可以搜到你）  </p>\n<p>如何选择\n根据项目需求，老板没有明确说就不管，\n但是老板说需要seo优化则通过：Vue.js 服务器端渲染（nuxt.js）   </p>\n<blockquote>\n<p>tips</p>\n<p>1-为什么单页面(SPA)网站无法被seo？：<a href=\"https://www.zhihu.com/question/416192007/answer/1424413130\">https://www.zhihu.com/question/416192007/answer/1424413130</a></p>\n<p>2-多页面应用(MPA)也就是二升三锋团PC项目也是不利于seo优化，最终是否利于seo主要还是看页面数据是直接和html一起返回的、还是要重新发送ajax请求的。</p>\n<p>3-vue中想利于seo则通过nuxt.js技术，react则通过next.js</p>\n</blockquote>\n<h2>🌟 路由-参数周边种类、方式</h2>\n<p>参数种类：query、params</p>\n<p>传参方式</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">query、path\nthis.$router.push( {query, path} )\t\t定义路由时【不用管】刷新【不丢失】\n\nparams、name 写冒号  \nthis.$router.push( {params, name} )  定义路由时【需要管】刷新【不丢失】 \n\nparams、name 不写冒号\nthis.$router.push( {params, name} )  定义路由时【不用管】刷新【丢失】</code></pre></div>\n<h2>🌟 路由-谈谈你对编程式导航的理解</h2>\n<p>作用：就是利用js跳转网页</p>\n<p>留心：声明式就是用a标签跳转</p>\n<p>场景：登陆、添加按钮、删除按钮等</p>\n<p>语法</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">this.$router.push( { path:'/路径', query: {参数名:值} } )\nthis.$router.push( { name:'名称', params: {参数名:值} } )\n\n获取：this.$route.query/params.参数名</code></pre></div>\n<h2>🌟 路由-说出嵌套路由&#x26;命名视图的场景</h2>\n<p>嵌套路由</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">概念：一个路由，显示多个组件，并且有父子关系所以通过children来定义\n语法：子路由通过children来定义，然后父的组件内容通过router-view来显示匹配的子组件\n场景：后台管理系统经典两栏布局 点击左侧菜单，右侧显示子组件内容</code></pre></div>\n<p>命名视图</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">概念：一个路由，显示多个组件，并且有兄弟关系所以component改为components\n语法：定义路由把component改为components，然后视图给router-view 加name属性\n场景：移动端navBar、tabBar</code></pre></div>\n<h2>🌟 路由-全局导航守卫登陆鉴权</h2>\n<p>作用；没登陆不可以访问会员中心、后台首页</p>\n<p>语法：router.beforeEach    判断h5  next</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 全局前置守卫\n// 导航守卫：导航/地址栏门卫，监控路由变化\nrouter.beforeEach((to, from, next) => {\n  // ...\n  // to 存放新的路由数据\n  // from 存放旧的路由数据\n  // next()    写- 允许后续代码执行，可以看到组件内容\n  // next()   不写- 阻止后续代码执行，因此组件不渲染看不到内容\n  // next({path: '/login'}) 跳转到login页面\n\n  // console.log(to);\n  // 检查当前访问的路径\n  // 在数组中就直接next 不用检查是否登录\n  // 白名单\n  if ([\"/login\", \"/404\"].includes(to.path)) {\n    next();\n  } else {\n    // 上述白名单直接忽略不用判断\n    // 但是其他得判断\n    let token = localStorage.getItem(\"token\");\n    if (token) {\n      next();\n    } else {\n      next({ path: \"/login\" });\n    }\n  }</code></pre></div>\n<h2>🌟 路由-导航守卫种类&#x26;作用</h2>\n<p>种类：全局、路由、组件</p>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">全局：beforeEach\t\t\t\t 登录状态、网页加载进度条\n全局：beforeResolve\t    不用（路由、组件守卫被解析也就是被调用后）\n全局：afterEach\t\t\t    关闭网页加载进度条 NProgress\n\n路由：beforeEnter\t\t    不用\n\n组件：beforeRouteEnter   组件被创建前（注：不能用this）\n组件：beforeRouteUpdate   动态路由匹配/动态获取路由参数\n组件：beforeRouteLeave   未保存离开组件/清除定时器/切换组件保存数据等</code></pre></div>\n</blockquote>\n<p>全局</p>\n<blockquote>\n<p><strong>全局前置守卫</strong> beforeEach\t\t  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">场景1：登录验证，判断用户是否登录，登录-next()，没登录-重定向到登录页 next({path:'/login'})\n场景2：显示网页加载进度条\n\n\n// 导航守卫（监控路由变化）\n// to 路由对象（新页面路由对象  to.path 可以获取当前新页面路由路径\n// form 路由对象（旧页面路由对象  form.path 可以获取当前旧页面路由路径\n// next 函数  可以控制页面正常访问或者重定向\nimport store from \"@/store\";\nimport router from \"@/router\";\nimport NProgress from \"nprogress\";\nimport \"nprogress/nprogress.css\";\n\nconst whiteList = [\"/login\", \"/404\", \"/login/sms\", \"/login/token\"];\n\nrouter.beforeEach((to, from, next) => {\nNProgress.start();\n// ...\n// 1 判断你访问的是什么页面\nif (whiteList.indexOf(to.path) != -1) {\n next();\n} else {\n // 登录相关的页面、404 直接next\n // 其他 判断token是否存在\n // let token = this.$store.state.login.token\n let token = store.state.login.token;\n // - 存在 next({})\n // - 不存在 next({path: '/login'})\n if (token) {\n   if (store.state.auths.menus.length &lt;= 0) {\n     console.log(\"重新获取权限菜单\");\n     store.dispatch(\"auths/FETCH_MENUS\");\n   }\n   next();\n } else {\n   next({ path: \"/login\" });\n }\n}\n});\n\nrouter.afterEach(() => {\nNProgress.done();\n});</code></pre></div>\n<p><strong>全局解析守卫</strong>beforeResolve    2.5.0+</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">场景：不用\n触发：路由、组件守卫被解析也就是被调用后</code></pre></div>\n<p><strong>全局后置钩子</strong>afterEach</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">场景：关闭网页加载进度条 NProgress\n触发：最后、特色没有next不会改变导航本身：\n\n\nrouter.afterEach(() => {\nNProgress.done();\n});</code></pre></div>\n</blockquote>\n<p>路由</p>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n\tpath,\n\tcomponent,\n\t...\n\tbeforeEnter: (to, from, next) => {\n\t// ...\n}\n}</code></pre></div>\n</blockquote>\n<p>组件</p>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Vue.component(组件名, {\n\tbeforeRouteEnter    组件被创建前（注：不能用this）\n\tbeforeRouteUpdate (2.2 新增)   动态路由匹配/动态获取路由参数\n\tbeforeRouteLeave   未保存离开组件/清除定时器/切换组件保存数据等\n})\n\nbeforeRouteLeave (to, from, next) {\n// 禁止用户在还未保存修改前突然离开\nconst answer = window.confirm('Do you really want to leave? you have unsaved changes!')\nif (answer) {\nnext()\n} else {\nnext(false)\n}\n}\n或\nbeforeRouteLeave (to, from, next) {\nwindow.clearInterval(this.timer) //清楚定时器\nnext()\n}\n或\nbeforeRouteLeave (to, from, next) {\n// 当用户需要关闭页面时, 可以将公用的信息保存到session或Vuex中\nlocalStorage.setItem(name, content); //保存到localStorage中\nnext()\n}</code></pre></div>\n</blockquote>\n<h2>🌛 路由-导航守卫执行顺序</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">导航被触发。\n在失活的组件里调用 beforeRouteLeave 守卫。\n调用全局的 beforeEach 守卫。\n在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。\n在路由配置里调用 beforeEnter。\n解析异步路由组件。\n在被激活的组件里调用 beforeRouteEnter。\n调用全局的 beforeResolve 守卫 (2.5+)。\n导航被确认。\n调用全局的 afterEach 钩子。\n触发 DOM 更新。\n调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。</code></pre></div>\n<h2>🌟 路由-动态路由如何实现</h2>\n<p>面试提问</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">如何实现权限控制\n如何实现菜单权限\n如何实现动态路由\n如何动态添加路由规则\n项目是前端路由还是后端路由</code></pre></div>\n<p>实战项目回答</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">见下面👇 </code></pre></div>\n<p>作用&#x26;语法</p>\n<blockquote>\n<p>作用：不同角色，权限菜单看到的不一样</p>\n<p>步骤1：页面菜单导航根据接口数据渲染</p>\n<p>步骤2：路由不能全部写死，而是全部注释掉，利用addRoutes或addRoute动态添加路由规则</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">举个栗子：商品列表、用户列表、权限列表、订单列表等等\n1、api目录定义接口导出\n2、组件内导入\n3、最后组件内的created钩子函数中调用\n\n\n\n动态路由特殊：\n1-首先api目录定义接口导出\n2-接着在vuex auth文件中去定义actions获取权限菜单数据\n然后再全局导航守卫beforeEach中判断用户登录了，但是没有菜单数据 就通过dispatch触发actions获取权限菜单数据 \n\n目的1：登录页  跳转到  欢迎页    beforeEach  发现vuex中没有菜单数据  请求接口保存到vuex中\n目的2：后期页面刷新vuex就丢了，没事 刷新页面也就是路由变化了 beforeEach 也会触发   发现vuex中没有菜单数据  请求接口保存到vuex中\n\n\n\n或\n1、在vuex中定义actions获取权限菜单数据   actions拿到数据后 触发mutations添加动态路由addRoute并且保存到模型中\n2、在全局导航守卫中   判断vuex中是否有权限菜单数据 ，没有就触发actions 去获取权限菜单数据 并保存到模型中</code></pre></div>\n</blockquote>\n<h2>🌟 路由-元信息有啥用</h2>\n<p>meta 存放面包屑、也可以加标识控制是否缓存组件</p>\n<p>实现1：页面菜单导航根据接口数据渲染</p>\n<p>实现2：路由不能全部写死，利用addRoutes或addRoute动态添加路由规则</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">router.addRoute(\"admin\", {\n  path: twoMenu.url,\n  component: () => import(\"@/views/\" + twoMenu.component),\n  meta: {\n    name1: twoMenu.auth_pname,\n    name2: twoMenu.auth_name,\n    keep_alive: twoMenu.keep_alive,\n  },\n});</code></pre></div>\n<h2>🌛 路由-过渡特效场景</h2>\n<p>项目中会用到</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;transition class-enter-class=\"animated 类名\">\n  &lt;router-view>&lt;/router-view>\n&lt;/transition></code></pre></div>\n<h1>■ week2-day2  脚手架相关</h1>\n<h2>💘 课件</h2>\n<p>week2-day2  Vue进阶（项目准备：脚手架、ToDoList案例、组件封装、全局组件、Vue.config.js配置）</p>\n<h2>🌟 说出框架中做了哪些配置vue.config.js</h2>\n<p>别名</p>\n<p>跨域（最终上线还得后端或运维处理</p>\n<p>移出console</p>\n<p>图片压缩</p>\n<p>引入外部CDN</p>\n<p>等等 </p>\n<p>面试追问：为啥要引入外部cdn  </p>\n<p>回答：减轻应用/代码服务器压力/并发，请求负载均衡/分发到其他服务器（注：银行原来有一个取款机，现在有n个）</p>\n<h2>🌟 说出跨域的解决方案</h2>\n<p>常用的</p>\n<p>谷歌命令</p>\n<p>谷歌插件</p>\n<p>JSONP</p>\n<p>http-proxy-middleware</p>\n<p>等等</p>\n<p>追问：项目中如何配置</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vue中配置  devServer  配置就可以了</code></pre></div>\n<p>追问：在哪个文件中</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vue.config.js 中\n\nmodule.exports = {\n\t // ...\n\t devServer: {}\n\t // ...\n}</code></pre></div>\n<h2>🌟 说出Vue.use原理</h2>\n<p>Vue.use主要用来在框架中全局注册插件，例如注册全局的组件等，</p>\n<p>然后底层源码大致做了两件事</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 检查传递的插件有没有重复注册\n2 判断plugin.install是不是函数 或 plugin 是不是函数  然后分别用apply调用让函数执行  注册，\n\nVue.component(组件名, 单文件组件)</code></pre></div>\n<p>源码 <a href=\"https://github.com/vuejs/vue/blob/dev/src/core/global-api/use.js\">https://github.com/vuejs/vue/blob/dev/src/core/global-api/use.js</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export function initUse (Vue: GlobalAPI) {\n  // 接受一个plugin参数，限制为 Function | Object两种类型\n  Vue.use = function (plugin: Function | Object) {\n    // _installedPlugins 存储所有注册过的 plugin\n    const installedPlugins = (this._installedPlugins || (this._installedPlugins = []))\n    // 保存注册组件的数组，不存在则创建，存在则直接返回，不允许重复注册\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    // 将传入的参数转换成数组\n    const args = toArray(arguments, 1)\n    // 将Vue对象拼接到数组头部\n    args.unshift(this)\n    // 如果提供了 install 方法，则直接调用\n    if (typeof plugin.install === 'function') {\n      // 如果组件是对象，且提供install方法，调用install方法将参数数组传入，改变`this`指针为该组件\n      plugin.install.apply(plugin, args)\n    } else if (typeof plugin === 'function') {\n      // 否则直接执行\n      plugin.apply(null, args)\n    }\n    // 将plugin存储到  installedPlugins，表示y已经注册过\n    installedPlugins.push(plugin)\n    return this\n  }\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/**\n * Convert an Array-like object to a real Array.\n */\nexport function toArray (list: any, start?: number): Array&lt;any> {\n  start = start || 0\n  let i = list.length - start\n  const ret: Array&lt;any> = new Array(i)\n  while (i--) {\n    ret[i] = list[i + start]\n  }\n  return ret\n}</code></pre></div>\n<h1>■ week2-day3  UI组件库</h1>\n<h2>💘 课件</h2>\n<p>week2-day3  Vue进阶am（项目准备：UI组件库ElemenUI、IView、AntdV、Vant、Mint等、自研UI组件库）</p>\n<h2>🌛 说出UI组件库/UI框架原理</h2>\n<p>步骤1：首选通过vue单页面应用定义好公共组件</p>\n<p>步骤2：定义所有UI组件导出入口文件 src/components/index.js</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import Kuangkuang from '@/components/kuangkuang/Index.vue'\nimport Page from '@/components/page/Index.vue'\n\nexport default Vue => {\n // 语法：Vue.component(后期调用的组件名, 单文件组件)\n // 注册：后期就可以直接调用，不需要单独导入\n // Vue.component('qfui-kuangkuang', Kuangkuang)\n // Vue.component('qfui-page', Page)\n // Vue.component(Kuangkuang.name, Kuangkuang)\n // Vue.component(Page.name, Page)\n\n   const coms = [Kuangkuang, Page]\n   coms.forEach(com => {\n     Vue.component(com.name, com)\n   })\n}</code></pre></div>\n<p>步骤3：接着打包</p>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"scripts\": {\n\"serve\": \"vue-cli-service serve\",\n\"build\": \"vue-cli-service build\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \t       打包后文件名 打包后存的目录  打包的组件在哪\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      -----\t\t\t   ----\t\t------------------\n\"build:ui\": \"vue-cli-service build --target lib --name qf-ui --dest dist2 ./src/components/index.js\"\n},</code></pre></div>\n</blockquote>\n<p>步骤4：最后按照node包发布就可以使用</p>\n<h1>■ week2-day4/5  Vue锋团项目布局</h1>\n<h2>🌟 项目开发中有没有封装过组件</h2>\n<p>有</p>\n<p>或者用语言：开发过</p>\n<h2>🌟 项目中封装了哪些组件</h2>\n<p>有很多，</p>\n<p>比如封装了公共的table、form等组件，</p>\n<p>还有很多页面组件，例如例如编辑用户、分配角色，分配权限、门店创建、分类编辑等都有封装提取页面组件，从而便于后期维护</p>\n<h2>🌟 组件如何封装的</h2>\n<p>页面组件：首先在页面中完成功能，然后再views/模块名/components中定义单文件组件，然后导入使用，从而让组件更便于后期维护</p>\n<blockquote>\n<p>概念：将组件中不同逻辑的代码提取封装，便于后期维护</p>\n</blockquote>\n<p>公共组件：首先在src/components定义form公共组件，然后全局注册导入使用，最终根据需求利用props接受参数&#x26;创建自定义事件</p>\n<h2>🌟 样式相关</h2>\n<ul>\n<li>题目1：如何防止样式的污染？</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">scoped</code></pre></div>\n<ul>\n<li>题目2：scoped解决样式污染原理</li>\n</ul>\n<blockquote>\n<p>说明：vue在编译的时候通过在DOM元素以及css样式上加上唯一标记，实现样式私有化，不污染全局样式。</p>\n<p>举例：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div class=\"my-class\">&lt;/div>\n编译为\n&lt;div class=\"my-class\" data-v-56e7f952>&lt;/div>\n对应的样式.my-class编译为\n.my-class[data-v-56e7f952]</code></pre></div>\n<p>原理：利用前端自动化构建工具webpack结合PostCSS模块编译实现css模块化</p>\n<p><a href=\"https://www.postcss.com.cn/\">https://www.postcss.com.cn/</a>   </p>\n</blockquote>\n<ul>\n<li>题目3：项目中开启样式私有化后，无法修改子组件例如elementui、antdv如何解决</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">通过【深度作用选择器】，你可以使用 >>> 操作符；有些像 Sass 之类的预处理器无法正确解析 >>>。这种情况下你可以使用 /deep/ 或 ::v-deep 操作符取而代之——两者都是 >>> 的别名，同样可以正常工作。   </code></pre></div>\n<p><a href=\"https://vue-loader.vuejs.org/zh/guide/scoped-css.html#%E6%B7%B1%E5%BA%A6%E4%BD%9C%E7%94%A8%E9%80%89%E6%8B%A9%E5%99%A8\">https://vue-loader.vuejs.org/zh/guide/scoped-css.html#%E6%B7%B1%E5%BA%A6%E4%BD%9C%E7%94%A8%E9%80%89%E6%8B%A9%E5%99%A8</a> </p>\n<h2>🌟 用户角色权限三者是如何关联的</h2>\n<p>首先在权限管理可以添加删除权限，实现后端路由</p>\n<p>接着可以添加删除角色，然后给角色分配权限</p>\n<p>最后在用户管理给用户分配角色，</p>\n<p>后期不同用户登录就可以看到不同点权限菜单/导航</p>\n<h1>■ week3-day1  异步请求</h1>\n<h2>💘 课件</h2>\n<p>week3-day1  Vue基础（项目准备：axios、fetch数据请求</p>\n<h2>🌟 谈谈你对HTTP理解</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">超文本传输协议、规定客户端和服务端如何通信，\n\n他是是请求行，响应行，请求头，响应头，请求体，响应体组成，\n之前我做项目的回收 请求行你们主要查看请求地址、请求状态、请求方式、请求体头里面主要放cookie、token、content-type等，请求体主要看参数有没有传递给后端、响应体后端返回的数据进行项目调试。</code></pre></div>\n<h2>🌟 谈谈你对状态码的理解</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2xx  200成功 201成功并创建新资源\n3xx  301永久重定向 302临时重定向 304浏览器缓存\n4xx  400参数有误 401密码错误 403无权访问 404文件不存在 405请求方式有误\n5xx  500服务器错误</code></pre></div>\n<h2>🌟 post、get区别</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">安全角度   post对象安全 get地址栏 后期可以通过历史记录查看登陆密码\n数据角度   get地址栏 不同浏览器地址栏长度限制   post后端规定 2M 8M</code></pre></div>\n<h2>🌟 xhr、fetch区别</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">xhr、fetch\n\n相同点：1-都可以发送异步请求、2-都是ECMA定义的\n不同点：前者异步回调地狱，后者promise</code></pre></div>\n<blockquote>\n<p>其他了解</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">最初ajax（XMLHttpRequest ECMA组织）   瑕疵：1-语法麻烦太多，2-异步回调地狱，3-语法有兼容性问题\n后台jq（第三方作者） \n\t明确：JQ里面的$.ajax/get/post是基于XMLHttpRequest封装的  function + ajax + callback\n\t好处：语法更简单、解决很多兼容性问题\n\t瑕疵：异步回调地狱还在\n\n\t解决：通过promise技术\n\n最后fetch（ECMA组织）  ：结合promise技术而生，代替传统xhr</code></pre></div>\n</blockquote>\n<h2>🌟 fetch、axios区别</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">相同点：1 都可以发送异步请求，2 都是promise\n不同点：1 fetch官方、axios社区，2 axios更强并发、拦截器等</code></pre></div>\n<h2>🌟 axios之前有没有封装过</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 封装axios导出request实例对象（timeout、baseURL、headers content-type、.env\n- 请求拦截器（开启Loading、token、CancelToken\n- 响应拦截器-成功（关闭Loading、res.data.data过滤 、 接口权限、TOKEN过期\n- 响应拦截器-失败（关闭Loading、timeout处理 、404、canceled、邮件报警捕捉前端异常</code></pre></div>\n<h2>🌟  axios原理</h2>\n<p>基于xmlhttprequest构造函数、和node中的http模块封装实现，动态判断浏览器环境、还是服务端环境</p>\n<p>去选择对应语法返回promise对象</p>\n<h2>🌟 跨域如何解决</h2>\n<p>常用的</p>\n<p>谷歌命令</p>\n<p>谷歌插件</p>\n<p>前端代理 http-proxy-middleware</p>\n<p>JSONP</p>\n<p>留心：不管前端咋操作最终上线都得后端或者服务器配置</p>\n<p>追问：项目中如何配置</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vue中配置  devServer  配置就可以了</code></pre></div>\n<p>追问：在哪个文件中</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vue.config.js 中\n\nmodule.exports = {\n\t // ...\n\t devServer: {}\n\t // ...\n}</code></pre></div>\n<h1>■ week3-day2  状态管理vuex相关</h1>\n<h2>💘 课件</h2>\n<p>week3-day2  Vue进阶（项目准备：VUEX单库、VUEX数据持久化b、VUEX单库模块化、VUEX框架模块化b）</p>\n<h2>🌟 说出vuex有哪些键</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">state、getters、mutations、actions、plugins、modules</code></pre></div>\n<h2>🌟 说出vuex工作流</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">state存放数据、\ngetters过滤\nmutations更新\nactions异步请求</code></pre></div>\n<h2>🌟 说出vuex数据持久化</h2>\n<p>H5存储</p>\n<p>第三方模块</p>\n<h2>🌟 2109</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">问1：vuex工作流\n答1：通过state定义状态、通过getters过滤状态、通过mutations更新状态、通过actions异步请求\n - 追问：里面具体怎么写、或者面试官问的是vuex具体怎么写的？\n - 回答：state是对对象 里面写键:值，getter是对象  里面写函数  返回过滤的数据，mutations 是对象  里面写函数  形参是state。\n - 追问：vuex在项目中怎么用？\n - 回答：store文件中通过module模块化定义状态，然后通过辅助函数mapState、mapMutations去获取\n - 追问：具体场景呢？\n - 回答：比如我之前做xxx项目，登录成功之后用户名、角色、token、权限菜单等等就是存在vuex中，然后通过辅助函数获取显示；\n - 追问：怎么获取state的数据怎么取？\n - 回答：可以通过 this.$store.state.键获取   但是我之前做xxx项目主要使用vuex的辅助函数mapState\n - 追问：vuex属性之间的联系，还有辅助函数\n - 回答：getter过滤state里面，mutations去更新state里面，actions主要发送异步请求然后触发mutations更新state里面的数据；\n - 追问：为什么在action里面写异步请求，而不会mutation\n - 回答：首先mutation也可以写异步请求，但是官方推荐在action里面写，从而确保拿到数据之后再更新状态，避免mutation写异步请求存在同步异步问题，也就是拿到数据【之前】更新了状态。\n \n问2：vuex有哪些键\nvuex中的键，和其他工作流，具体mutation和action的相同点，怎么用\n问3：vuex怎么用\n问4：vuex数据是永久的还是临时的</code></pre></div>\n<h1>■ week3-day3/4/5  Vue锋团项目接口</h1>\n<h2>🌟 说一下登录如何实现的</h2>\n<p>1、通过elementui布局 表单验证</p>\n<p>2、给登录绑定点击事件，...  </p>\n<p>3、然后通过vuex辅助函数 调用 actions 去请求接口</p>\n<p>4、失败弹框提示，成功将token、uname、roleName存储vuex中，然后提示登录成功&#x26;&#x26;重定向</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 vuex周边问题 比如数据持久化、比如有哪些键\n2 axios周边问题\n3 token周边问题（过期问题</code></pre></div>\n<h2>🌟 如何判断用户是否登录</h2>\n<h2>🌟 登录是如何鉴权的</h2>\n<p>通过全局导航守卫判断，白名单直接next、非白名单判断h5或vuex中是否存在  不存在重定向到 登录页即可</p>\n<h2>🌟 说一下token过期机制</h2>\n<p>纯前端处理</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 登录既要存token  又要额外存一个时间\n2 axios请求拦截器里面  判断是否过期 提示token过期，然后就重定向到登录页</code></pre></div>\n<p>前后端结合处理</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 登录就存token晚吃\n2 请求拦截器每次请求携带token\n3 相应拦截器判断是否过期  提示token过期，过期就重定向登录页</code></pre></div>\n<h2>🌟 项目中是前端路由还是后端路由</h2>\n<h2>🌟 权限菜单如何实现的</h2>\n<p>后端路由</p>\n<p>追问：后端路由如何实现的？</p>\n<p>回答：几个关键词  请求接口、addRoute、菜单还的遍历搞出来、vuex</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1、首先通过vuex定义actions获取当前用户的权限数据，然后触发mutations、保存到state中、并且通过addRoute添加动态路由\n2、在导航守卫中判断store中的权限数据是否存在，存在next不存在全局导航守卫beforeEach触发action获取\n\n\n\n3、后台首页layout下面的menu中通过辅助函数获取遍历显示</code></pre></div>\n<p>其他备注：一般token有效期7200s  也就是2小时  具体看公司</p>\n<h2>🌟 ....</h2>\n<p>​    </p>\n<h2>🌟 项目做了哪些优化</h2>\n<ul>\n<li>交互角度</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">animate.css     \nvue-lazyload  \nnprogress\nloading\npreventReClick\n等</code></pre></div>\n<ul>\n<li>代码角度</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">混入\n过滤器\n页面组件提取封装\n公共组件提取封装\naxios封装\n全局配置文件  process.env\n等等</code></pre></div>\n<ul>\n<li>性能角度  webpack</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">关闭prefetch预加载 \n图片压缩  \t\t  原理：image-webpack-loader\n引入外部cdn  \t   原理：configureWebpack  -> externals \nUI框架按需加载    原理：babel-plugin-import 实现自动按需引入\n路由/组件懒加载   原理：es6 import动态加载 + webapck文件分割\n等等</code></pre></div>\n<ul>\n<li>性能优化  web server 或 code</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">nginx服务器配置：开启强制缓存expires缓存（注：这个单词cookie中碰到过）\nnginx服务器配置：开启gzip压缩\nkeep-alive组件缓存\n等等</code></pre></div>\n<p>​    </p>\n<h2>🌟 说出路由懒加载原理</h2>\n<p>es6 动态导入 + webpack文件分割</p>\n<blockquote>\n<p>普通导入：import  组件名  from  路径及文件名      打开就触发</p>\n<p>动态导入：component: () => import(路径及文件名)   访问才触发</p>\n</blockquote>\n<h2>🌟 周边：async、await具体怎么用的</h2>\n<p>就是钩子函数中、或者vuex的actions中不经常需要写api请求接口吗</p>\n<p>然后通过async、await来修饰完成功能</p>\n<p>举例：比如权限菜单、各种登录咱们都用了</p>\n<h1>■ 查缺补漏</h1>\n<h2>🌟 说一下Diff算法</h2>\n<p>算法规则</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 步骤一：用JS对象模拟DOM树\n2 步骤二：比较两棵虚拟DOM树的差异（切记切记切记：一层一层比）\n3 步骤三：把差异应用到真正的DOM树上\n4 步骤四：在页面展示\n\n虚拟DOM介绍：https://www.jianshu.com/p/616999666920  \n如何实现一个Virtual DOM 算法：https://github.com/livoras/blog/issues/13 \n深入理解Diff算法：https://blog.csdn.net/lunahaijiao/article/details/86741739</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div id=\"root\">\n    &lt;div v-for=\"item in todos\">\n        &lt;input type=\"checkbox\" name=\"\" id=\"\">\n        {{item.title}}\n    &lt;/div>\n&lt;/div>\n&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\">&lt;/script>\n&lt;script>\nconst vm = new Vue({\n    el: \"#root\",\n    data: {\n        todos: [\n            {id:1, title:'吃饭'},\n            {id:2, title:'睡觉'},\n            {id:3, title:'挤痘痘'},\n        ]\n    }\n})\n&lt;/script>\n\n步骤1：通过浏览器运行 ，给第二个checkbox打钩\n步骤2：在控制台 vm.todos.splice(1,1)</code></pre></div>\n<p>什么是虚拟DOM：就是使用javascript的对象来描述了DOM结构</p>\n<p>为什么要虚拟DOM：提升性能（因为回流、重绘   浏览器工作机制）</p>\n<p>如何更新DOM数据：通过diff算法（同层比较）</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 步骤一：用JS对象模拟DOM树\n2 步骤二：比较两棵虚拟DOM树的差异(注：后期如果写写遍历 加上:key 提升性能的)\n3 步骤三：把差异应用到真正的DOM树上</code></pre></div>\n<p>切记：当遍历数据的时候要写key   提升性能、也是避免BUG</p>\n<h1>■ 周边</h1>\n<h2>🌟 【事件循环】谈谈你对Event Loop的理解</h2>\n<p><code class=\"language-text\">Event Loop</code>即事件循环，</p>\n<p>是指浏览器或<code class=\"language-text\">Node</code>的一种确保javaScript单线程运行时不会阻塞的一种机制，</p>\n<p>也就是我们经常使用<strong>异步</strong>的原理。    </p>\n<p>种类：浏览器的Event Loop、Node.js中的Event Loop</p>\n<h2>🌟 【事件循环】谈谈你对浏览器的Event Loop理解</h2>\n<p>  浏览器输入网址服务器响应数据后，</p>\n<p>浏览器会通过render进程开始解析工作</p>\n<p>GUI线程负责页面渲染</p>\n<p>JS引擎线程负责执行JS代码</p>\n<p>遇到异步代码会交给其他线程处理，然后放到队列中，</p>\n<p>事件循环主要是从队列中取出代码放到执行栈中交给js引擎线程处理</p>\n<h2>🌛【事件循环】谈谈你对Node.js中的Event Loop理解</h2>\n<blockquote>\n<p>libuv引擎中的事件循环分为 6 个阶段，它们会按照顺序反复运行。每当进入某一个阶段的时候，都会从对应的回调队列中取出函数去执行。当队列为空或者执行的回调函数数量到达系统设定的阈值，就会进入下一阶段。</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">timers 阶段：这个阶段执行timer（setTimeout、setInterval）的回调\nI/O callbacks 阶段：处理一些上一轮循环中的少数未执行的 I/O 回调\nidle, prepare 阶段：仅node内部使用\npoll 阶段：获取新的I/O事件, 适当的条件下node将阻塞在这里（轮训阶段）  \ncheck 阶段：执行 setImmediate() 的回调\nclose callbacks 阶段：执行 socket 的 close 事件回调</code></pre></div>\n<h2>🌟 【事件循环】说出宏任务、微任务各有哪些</h2>\n<blockquote>\n<p>单词含义：I input 输入、 O output 输出 </p>\n<p>用户角度IO操作：鼠标键盘-是计算机输入信息，显示器-是输出设备</p>\n<p>电脑角度IO操作：CPU、内存与其他设备之间数据转移过程就是IO操作，例如数据从磁盘读到内存，或者内存写到磁盘</p>\n<p>编程角度IO操作：进程读取数据操作</p>\n</blockquote>\n<ul>\n<li>宏任务：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">整体代码（script）\n定时器（setTimeout、setInterval）\nI/O操作（DOM事件、AJAX异步请求）\n\nsetImmediate（node环境）\nrequestAnimationFrame（浏览器环境）</code></pre></div>\n<ul>\n<li>微任务</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Promise.then catch finally\nasync/await（底层还是promise）\nprocess.nextTick（node环境） \nMutationObserver（浏览器环境）</code></pre></div>\n<h2>🌟 【事件循环】说出先执行宏任务还是微任务</h2>\n<p>算整体代码script：1宏n微</p>\n<p>不算整体代码script：先n微，再1宏 ->  n微，再1宏</p>\n<h2>🌟 【事件循环】浏览器和node中event loop区别</h2>\n<p>浏览器：一个宏走完清空所有微任务</p>\n<p>node：一个阶段走完  再清空所有微</p>","timeToRead":47}},"pageContext":{"slug":"posts/阶段三VUE面试题/","previousPost":{"fields":{"slug":"posts/面试重点/"},"frontmatter":{"title":"js相关面试题"}},"nextPost":{"fields":{"slug":"posts/阶段二面试题/"},"frontmatter":{"title":"阶段二面试题。"}}}},"staticQueryHashes":["3344698684","3792814546"]}